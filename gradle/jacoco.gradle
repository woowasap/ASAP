import java.util.stream.Collectors

var excludeFromCoverage = new ArrayList<String>()
file('coverage-exclude.asap').withInputStream() {
    it ->
        excludeFromCoverage.addAll(new BufferedReader(new InputStreamReader(it))
                .lines()
                .parallel()
                .map(s -> s.substring(7).strip())
                .collect(Collectors.toList()))
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "${jacocoToolVersion}"
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            html.required = true
            csv.required = true
            xml.required = true
        }
        finalizedBy 'jacocoTestCoverageVerification'
        dependsOn test

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludeFromCoverage.stream()
                        .map(s -> s + ".class")
                        .collect(Collectors.toList()))
            }))
        }
    }

    jacocoTestCoverageVerification {
        violationRules {

            rule {
                enabled = true
                element = 'CLASS'
                excludes += excludeFromCoverage.stream()
                        .map(s -> s.replace("/", "."))
                        .collect(Collectors.toList())

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.70
                }

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.70
                }

            }

        }
    }

}

var allProjects = getAllprojects().stream()
        .filter(p -> !p.getDisplayName().contains('root project'))
        .collect(Collectors.toList())

project(':support:jacoco') {
    apply plugin: 'jacoco-report-aggregation'

    testCodeCoverageReport {
        getClassDirectories().setFrom(files(
                allProjects
                        .collect {
                            it.fileTree(dir: "${it.buildDir}/classes/java/main", exclude:
                                    excludeFromCoverage.stream()
                                            .map(s -> s + ".class")
                                            .collect(Collectors.toList()))
                        })
        )
    }

    var allProjectsExcludeJacoco = allProjects.stream()
            .filter(p -> !p.getDisplayName().contains('jacoco')
                    && !p.getDisplayName().contains('root project'))
            .collect(Collectors.toList())

    dependencies {
        implementation allProjectsExcludeJacoco
    }

}
